---
# Clang-Tidy Configuration for Flux Archive Manager
# Comprehensive static analysis configuration for modern C++23 code

Checks: >
  *,
  -abseil-*,
  -altera-*,
  -android-*,
  -fuchsia-*,
  -google-*,
  -llvm-*,
  -llvmlibc-*,
  -zircon-*,
  -readability-magic-numbers,
  -readability-avoid-const-params-in-decls,
  -cppcoreguidelines-avoid-magic-numbers,
  -cppcoreguidelines-pro-bounds-pointer-arithmetic,
  -cppcoreguidelines-pro-bounds-array-to-pointer-decay,
  -hicpp-avoid-c-arrays,
  -modernize-avoid-c-arrays,
  -cppcoreguidelines-avoid-c-arrays,
  -misc-non-private-member-variables-in-classes,
  -readability-identifier-length,
  -modernize-use-trailing-return-type,
  -readability-function-cognitive-complexity,
  -bugprone-easily-swappable-parameters

WarningsAsErrors: >
  bugprone-*,
  cert-*,
  clang-analyzer-*,
  concurrency-*,
  cppcoreguidelines-*,
  misc-*,
  modernize-*,
  performance-*,
  portability-*,
  readability-*

CheckOptions:
  # Naming conventions
  - key: readability-identifier-naming.NamespaceCase
    value: lower_case
  - key: readability-identifier-naming.ClassCase
    value: CamelCase
  - key: readability-identifier-naming.StructCase
    value: CamelCase
  - key: readability-identifier-naming.FunctionCase
    value: lower_case
  - key: readability-identifier-naming.VariableCase
    value: lower_case
  - key: readability-identifier-naming.ParameterCase
    value: lower_case
  - key: readability-identifier-naming.MemberCase
    value: lower_case
  - key: readability-identifier-naming.PrivateMemberSuffix
    value: _
  - key: readability-identifier-naming.ProtectedMemberSuffix
    value: _
  - key: readability-identifier-naming.EnumConstantCase
    value: UPPER_CASE
  - key: readability-identifier-naming.ConstantCase
    value: UPPER_CASE
  - key: readability-identifier-naming.StaticConstantCase
    value: UPPER_CASE
  - key: readability-identifier-naming.MacroDefinitionCase
    value: UPPER_CASE
  - key: readability-identifier-naming.TypeAliasCase
    value: CamelCase
  - key: readability-identifier-naming.TypedefCase
    value: CamelCase
  - key: readability-identifier-naming.TemplateParameterCase
    value: CamelCase

  # Function length and complexity
  - key: readability-function-size.LineThreshold
    value: 150
  - key: readability-function-size.StatementThreshold
    value: 100
  - key: readability-function-size.BranchThreshold
    value: 20
  - key: readability-function-size.ParameterThreshold
    value: 8

  # Performance settings
  - key: performance-move-const-arg.CheckTriviallyCopyableMove
    value: false
  - key: performance-unnecessary-value-param.AllowedTypes
    value: 'std::function;std::string_view;std::span'

  # Modernize settings
  - key: modernize-loop-convert.MaxCopySize
    value: 32
  - key: modernize-loop-convert.MinConfidence
    value: reasonable
  - key: modernize-pass-by-value.IncludeStyle
    value: google
  - key: modernize-replace-auto-ptr.IncludeStyle
    value: google
  - key: modernize-use-auto.MinTypeNameLength
    value: 8
  - key: modernize-use-auto.RemoveStars
    value: true

  # Readability settings
  - key: readability-braces-around-statements.ShortStatementLines
    value: 2
  - key: readability-implicit-bool-conversion.AllowPointerConditions
    value: true
  - key: readability-implicit-bool-conversion.AllowIntegerConditions
    value: false
  - key: readability-simplify-boolean-expr.ChainedConditionalReturn
    value: true
  - key: readability-simplify-boolean-expr.ChainedConditionalAssignment
    value: true
  - key: readability-uppercase-literal-suffix.NewSuffixes
    value: 'L;LL;LU;LLU'

  # Bugprone settings
  - key: bugprone-argument-comment.StrictMode
    value: true
  - key: bugprone-assert-side-effect.AssertMacros
    value: 'assert,ASSERT_TRUE,ASSERT_FALSE,EXPECT_TRUE,EXPECT_FALSE'
  - key: bugprone-dangling-handle.HandleClasses
    value: 'std::basic_string_view;std::experimental::basic_string_view;std::span'
  - key: bugprone-exception-escape.FunctionsThatShouldNotThrow
    value: 'main;swap;hash'
  - key: bugprone-sizeof-expression.WarnOnSizeOfConstant
    value: true
  - key: bugprone-sizeof-expression.WarnOnSizeOfIntegerExpression
    value: true
  - key: bugprone-sizeof-expression.WarnOnSizeOfThis
    value: true
  - key: bugprone-sizeof-expression.WarnOnSizeOfCompareToConstant
    value: true

  # Cert settings
  - key: cert-dcl16-c.NewSuffixes
    value: 'L;LL;LU;LLU'
  - key: cert-oop54-cpp.WarnOnlyIfThisHasSuspiciousField
    value: false

  # Misc settings
  - key: misc-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic
    value: true
  - key: misc-throw-by-value-catch-by-reference.CheckThrowTemporaries
    value: true

  # Cppcoreguidelines settings
  - key: cppcoreguidelines-explicit-virtual-functions.IgnoreDestructors
    value: true
  - key: cppcoreguidelines-macro-usage.AllowedRegexp
    value: '^(FLUX_|Q_|GTEST_|EXPECT_|ASSERT_)'
  - key: cppcoreguidelines-narrowing-conversions.WarnOnFloatingPointNarrowingConversion
    value: true
  - key: cppcoreguidelines-narrowing-conversions.WarnOnIntegerNarrowingConversion
    value: true
  - key: cppcoreguidelines-narrowing-conversions.WarnOnIntegerToFloatingPointNarrowingConversion
    value: true
  - key: cppcoreguidelines-pro-type-member-init.IgnoreArrays
    value: true
  - key: cppcoreguidelines-special-member-functions.AllowSoleDefaultDtor
    value: true
  - key: cppcoreguidelines-special-member-functions.AllowMissingMoveFunctions
    value: true

HeaderFilterRegex: '^.*/(flux-core|flux-gui|flux-cli)/.*\.(h|hpp)$'

SystemHeaders: false

FormatStyle: file

# Exclude certain files from analysis
ExcludeHeaderFilter: >
  .*/third-party/.*|
  .*/build/.*|
  .*/vcpkg_installed/.*|
  .*_autogen/.*|
  .*\.pb\.h|
  .*\.pb\.cc|
  .*/ui_.*\.h|
  .*/moc_.*\.cpp|
  .*/qrc_.*\.cpp
