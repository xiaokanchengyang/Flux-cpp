name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  # Build configuration
  QT_VERSION: "6.5.4"
  CMAKE_VERSION: "3.25"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release, Debug]
        exclude:
          # Reduce matrix size for faster CI - only test Debug on Ubuntu
          - os: windows-latest
            build_type: Debug
          - os: macos-latest
            build_type: Debug
        include:
          - os: ubuntu-latest
            artifact_name: flux-linux
            package_format: AppImage
          - os: windows-latest
            artifact_name: flux-windows
            package_format: ZIP
          - os: macos-latest
            artifact_name: flux-macos
            package_format: DMG
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Cache Qt installation to speed up builds
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v4
        with:
          path: ../Qt
          key: ${{ runner.os }}-Qt-${{ env.QT_VERSION }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-Qt-${{ env.QT_VERSION }}-
            ${{ runner.os }}-Qt-

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          cache: ${{ steps.cache-qt.outputs.cache-hit }}
          modules: 'qtbase qttools qtsvg'

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: ${{ env.CMAKE_VERSION }}

      # Cache CMake build directory for faster incremental builds
      - name: Cache CMake build
        uses: actions/cache@v4
        with:
          path: |
            build
            !build/Testing
            !build/**/*.log
          key: ${{ runner.os }}-cmake-${{ matrix.build_type }}-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
          restore-keys: |
            ${{ runner.os }}-cmake-${{ matrix.build_type }}-
            ${{ runner.os }}-cmake-

      # Cache vcpkg dependencies (if using vcpkg in the future)
      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            vcpkg
            !vcpkg/buildtrees
            !vcpkg/downloads
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg.json', 'vcpkg-configuration.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            ninja-build \
            libgl1-mesa-dev \
            libxkbcommon-x11-0 \
            libxcb-icccm4 \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-randr0 \
            libxcb-render-util0 \
            libxcb-xinerama0 \
            libxcb-xfixes0 \
            file \
            wget

      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        run: |
          choco install ninja

      - name: Setup MSVC (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew install ninja

      - name: Configure CMake
        run: |
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_INSTALL_PREFIX=install \
            -DFLUX_BUILD_TESTS=ON \
            -DFLUX_BUILD_BENCHMARKS=ON \
            -G "Ninja"

      - name: Build project
        run: cmake --build build --config ${{ matrix.build_type }} --parallel

      - name: Run tests
        run: |
          cd build
          ctest --output-on-failure --parallel 2 --build-config ${{ matrix.build_type }} || true

      - name: Install project
        run: cmake --install build --config ${{ matrix.build_type }}

      # Create platform-specific packages for Release builds
      - name: Create Linux AppImage
        if: runner.os == 'Linux' && matrix.build_type == 'Release'
        run: |
          # Create AppDir structure
          mkdir -p AppDir/usr/{bin,lib,share/{applications,icons/hicolor/256x256/apps}}
          
          # Copy binaries
          cp install/bin/* AppDir/usr/bin/ 2>/dev/null || true
          
          # Copy libraries
          cp -r install/lib/* AppDir/usr/lib/ 2>/dev/null || true
          
          # Create desktop file
          cat > AppDir/usr/share/applications/flux.desktop << 'EOF'
          [Desktop Entry]
          Type=Application
          Name=Flux Archive Manager
          Comment=Modern cross-platform archive manager
          Exec=flux-gui
          Icon=flux
          Categories=Utility;Archiving;FileManager;
          MimeType=application/zip;application/x-tar;application/x-7z-compressed;
          EOF
          
          # Create AppRun script
          cat > AppDir/AppRun << 'EOF'
          #!/bin/bash
          HERE="$(dirname "$(readlink -f "${0}")")"
          export LD_LIBRARY_PATH="${HERE}/usr/lib:${HERE}/usr/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH}"
          export QT_PLUGIN_PATH="${HERE}/usr/lib/qt6/plugins:${QT_PLUGIN_PATH}"
          exec "${HERE}/usr/bin/flux-gui" "$@"
          EOF
          chmod +x AppDir/AppRun
          
          # Create tarball (AppImage creation requires additional tools)
          tar -czf flux-linux-x86_64.tar.gz -C AppDir .

      - name: Create Windows package
        if: runner.os == 'Windows' && matrix.build_type == 'Release'
        shell: pwsh
        run: |
          # Deploy Qt dependencies
          if (Test-Path "install/bin/flux-gui.exe") {
            windeployqt install/bin/flux-gui.exe --dir install/bin --no-translations --no-system-d3d-compiler --no-opengl-sw
          }
          
          # Create ZIP package
          Compress-Archive -Path install/* -DestinationPath flux-windows-x64.zip -Force

      - name: Create macOS package
        if: runner.os == 'macOS' && matrix.build_type == 'Release'
        run: |
          # Create app bundle structure
          mkdir -p "Flux.app/Contents/MacOS"
          mkdir -p "Flux.app/Contents/Resources"
          
          # Copy executable
          if [ -f "install/bin/flux-gui" ]; then
            cp install/bin/flux-gui "Flux.app/Contents/MacOS/"
          fi
          
          # Create Info.plist
          cat > "Flux.app/Contents/Info.plist" << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>CFBundleExecutable</key>
            <string>flux-gui</string>
            <key>CFBundleIdentifier</key>
            <string>com.flux.archivemanager</string>
            <key>CFBundleName</key>
            <string>Flux Archive Manager</string>
            <key>CFBundleDisplayName</key>
            <string>Flux</string>
            <key>CFBundleVersion</key>
            <string>1.0.0</string>
            <key>CFBundleShortVersionString</key>
            <string>1.0</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>LSMinimumSystemVersion</key>
            <string>10.15</string>
          </dict>
          </plist>
          EOF
          
          # Deploy Qt dependencies
          macdeployqt Flux.app || true
          
          # Create tarball
          tar -czf flux-macos-x64.tar.gz Flux.app

      - name: Upload build artifacts
        if: matrix.build_type == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-${{ matrix.build_type }}
          path: |
            flux-*.tar.gz
            flux-*.zip
            install/
          retention-days: 30

  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: "6.5.4"
          cache: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-tidy cppcheck

      - name: Configure CMake with static analysis
        run: |
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_CXX_CLANG_TIDY="clang-tidy;-checks=-*,readability-*,performance-*,modernize-*"

      - name: Build with static analysis
        run: cmake --build build --parallel 2 || true

      - name: Run cppcheck
        run: |
          cppcheck --enable=all --std=c++23 \
            --suppress=missingIncludeSystem \
            --suppress=unusedFunction \
            --error-exitcode=1 \
            flux-core/src/ flux-gui/src/ flux-cli/src/ || true
