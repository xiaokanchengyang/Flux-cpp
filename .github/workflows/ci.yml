name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        config: [Release]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup CMake
        uses: lukka/get-cmake@v4

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build build-essential

      - name: Configure
        run: |
          cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.config }}

      - name: Build
        run: cmake --build build -- -j$(nproc || echo 2)

      - name: Run unit tests
        run: |
          if [ -d build ]; then ctest --test-dir build --output-on-failure || true; fi

  static-analysis:
    name: Static analysis (clang-tidy)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup CMake
        uses: lukka/get-cmake@v4

      - name: Install clang-tidy
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-tidy-14 clang-format-14

      - name: Configure with clang-tidy
        env:
          CXX: clang++
        run: |
          mkdir -p build || true
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_CLANG_TIDY="clang-tidy-14;-checks=*,-clang-analyzer-alpha.*,-llvm-*,-google-*,-cppcoreguidelines-avoid-magic-numbers"
      
      - name: Run build (this will invoke clang-tidy)
        run: cmake --build build -j$(nproc)

  sanitizer-tests:
    name: Sanitizer tests (ASAN / UBSAN)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup CMake
        uses: lukka/get-cmake@v4

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential ninja-build

      - name: Configure with sanitizers
        env:
          CXXFLAGS: "-fsanitize=address,undefined -fno-omit-frame-pointer -g"
          LDFLAGS: "-fsanitize=address,undefined"
        run: |
          mkdir -p build-sanitizer
          cd build-sanitizer
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_C_FLAGS="$CXXFLAGS" -DCMAKE_CXX_FLAGS="$CXXFLAGS" -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS"
      
      - name: Build
        run: cmake --build build-sanitizer -j$(nproc)

      - name: Run tests under sanitizer
        run: |
          ctest --test-dir build-sanitizer --output-on-failure --timeout 300 || true